package ${context.parentPackage}.${param.entityPackageName};


#if(${param.serializable}=="true")
import java.io.Serializable;
#end
#if(${table.hasDateField})
import java.time.LocalDate;
#end
#if(${table.hasDateTimeField})
import java.time.LocalDateTime;
#end
#if(${table.hasTimeField})
import java.time.LocalTime;
#end
#if(${table.hasBigDecimalField})
import java.math.BigDecimal;
#end
import javax.persistence.*;
import lombok.Data;


/**
 * 表名：${table.name}
 * 备注：${table.comment}
 */
@Entity
@Table(name = "${table.name}")
#if(${param.serializable}=="true")
@SuppressWarnings("serial")
#end
@Data
public class ${context.javaBeanName}${param.entitySuffix} #if(${param.serializable}=="true")implements Serializable #end{

#foreach($column in $columns)
    #if(${column.isPrimaryKey()})
    	@Id
    	@Column(name="${column.name}")
        #if(${column.isAutoIncrement()})
        	@GeneratedValue(strategy = GenerationType.IDENTITY)
        #elseif(${table.isUseUUID()})
        	@GeneratedValue(generator = "system-uuid")
        #else
            @GeneratedValue(strategy = GenerationType.AUTO)
        #end
    #else
            @Basic
        	@Column(name="${column.name}")
    #end
    #if(${column.name} == ${param.deleteColumn})
        @com.zhisland.finalmybatis.annotation.LogicDelete
    #end
        /** #if("$!{column.comment}" != "")${column.comment},#end 数据库字段：${column.name} */
    	private ${column.javaTypeBox} ${column.javaFieldName};


#end


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((${pk.javaFieldName} == null) ? 0 : ${pk.javaFieldName}.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {return true;}			
		if (obj == null) {return false;}			
		if (getClass() != obj.getClass()) {return false;}
			
		${context.javaBeanName} other = (${context.javaBeanName}) obj;
		
		if (${pk.javaFieldName} == null) {
			if (other.${pk.javaFieldName} != null) {return false;}				
		} else if (!${pk.javaFieldName}.equals(other.${pk.javaFieldName})) {
			return false;
		}
		
		return true;
	}
	
    @Override
	public String toString() {
    	StringBuilder sb = new StringBuilder();
        sb.append("${context.javaBeanName} [");
        #set ($i=0) 
#foreach(${column} in ${columns})
		#if($i > 0)sb.append(", ");#end
        sb.append("${column.javaFieldName}=").append(${column.javaFieldName});
        #set($i=$i + 1)
#end
        sb.append("]");
		return sb.toString();
	}

}